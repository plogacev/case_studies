---
title: "Bayesian Changepoint Detection on Price Histograms"
author: "Pavel Logaƒçev"
date: "r Sys.Date()"
format:
html:
toc: true
code-fold: true
code-tools: true
df-print: paged
engine: knitr
editor: visual
---

## Motivation

This notebook demonstrates a Bayesian changepoint detection model on synthetic sales data, where prices change over time. The aim is to estimate the probability of changepoints using a Stan model that marginalizes over all possible segmentations. For now, the model is simply a proof of concept and meant to be used as part of hierarchical model for price histograms, which is supposed to pick up on simulatenous price changes in multiple products.

## Setup

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(magrittr)
library(cmdstanr)
```

## Setup

```{r}
#set.seed(12345)
set.seed(123)

n_days <- 650
lambda_qty <- 5
#lambda_discount_qty <- 3
days <- 1:n_days
segments <- data.frame(
  start_day = c(1, 100, 200, 300, 400, 500, 550, 600),
  list_price = c(5, 5, 6, 6, 6, 5.5, 5.5, 5.5),
  discount_price = c(4, 4, 5, 5, 5, 4.5, 4.5, 4.5),
  discount_probability = c(.25, .1, .1, .25, .5, .01, .05, .15)
)

segment_id <- findInterval(days, segments$start_day)

df <- data.frame(
    day = days, 
    list_price = segments$list_price[segment_id],
    discount_price = segments$discount_price[segment_id],
    discount_probability = segments$discount_probability[segment_id],
    qty_total = rpois(n_days, lambda_qty)
) %>% 
mutate(
    qty_discount = rbinom(n_days, qty_total, discount_probability),
    qty_list_price = qty_total - qty_discount
) %>% 
select(-discount_probability, -qty_total) %>%
pivot_longer(
    cols = starts_with("qty_"),
    names_to = "type",
    values_to = "qty"
) %>%
mutate(
    price = if_else(type == "qty_discount", discount_price, list_price)
) %>%
select(day, price, qty)

```

```{r}
p_price <- df %>% filter(qty > 0) %>% ggplot(aes(day, price)) + geom_point(aes(size=qty)) + theme_bw() + geom_vline(xintercept = segments$start_day[-1], color = "red") 
print(p_price)
```


```{r}

df_nonzero <- df %>% mutate( total_qty = sum(qty), .by = "day" ) %>% filter(total_qty > 0) %>% select(-total_qty)
df_wide <- df_nonzero %>% pivot_wider(names_from = "price", values_from = "qty", values_fill = 0)

histogram_qty <- as.matrix(df_wide[,-1])
price_points <- as.numeric(colnames(histogram_qty))
histogram_qty <- histogram_qty[,order(price_points)]
price_points %<>% sort()

data_stan <- list(
  n_time_points = nrow(histogram_qty),
  n_price_points = ncol(histogram_qty),
  histogram = histogram_qty,
  price_points = price_points
)
```

## Compile and Run Stan Model

```{r}
model <- cmdstan_model("./changepoint_marginal_v1.stan")

opt <- model$optimize(
  data = data_stan,
  seed = 123
)
```


## Analyze Estimated Changepoint Probabilities

```{r}
cp_probs <- opt$summary("cp_probs") %>% .$estimate %>% c(., NA)
df_estimates <- data.frame( day = df_wide$day, cp_probs = cp_probs ) %>% filter(!is.na(cp_probs))
p_cp <- df_estimates %>% ggplot(aes(x=day, y=cp_probs)) + geom_point() + geom_bar(stat="identity") + theme_bw() + xlab("day") + ylab("Est. change probability")
```

```{r}
ggpubr::ggarrange(p_price + theme(legend.position = "none"), p_cp, ncol = 1)
```

## Inspect Model Internals

### Inspect Change Priors

```{r}
lp_change_prior <- opt$summary("lp_change_prior") %>% .$estimate
plot(df_wide$day, lp_change_prior)
```



## Remarks and Next Steps

- This notebook uses synthetic data; future extensions can incorporate real price time series.
- Model behavior can be improved by tuning the prior or increasing histogram resolution.
- Consider extending to hierarchical changepoint models across multiple products or locations.

